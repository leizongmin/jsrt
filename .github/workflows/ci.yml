name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Check code formatting
      run: |
        make clang-format
        if ! git diff --exit-code; then
          echo "Code formatting issues found. Please run 'make clang-format' and commit the changes."
          exit 1
        fi

  build-and-test:
    runs-on: ${{ matrix.os }}
    needs: format-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: macos-latest
            cc: clang
            cxx: clang++

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "no need to install cmake on macos"

    - name: Build (Release)
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: make jsrt

    - name: Build (Debug)
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: make jsrt_g

    - name: Run basic functionality test
      run: |
        echo 'console.log("Hello from CI!");' > test_ci.js
        ./target/release/jsrt test_ci.js
        ./target/debug/jsrt test_ci.js

    - name: Run unit tests
      run: make test

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jsrt-${{ matrix.os }}
        path: |
          target/release/jsrt
          target/debug/jsrt

  # Windows build (separate job due to different setup)
  build-windows:
    runs-on: windows-latest
    needs: format-check
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-cmake
          mingw-w64-ucrt-x86_64-make
          make

    - name: Build (Release)
      shell: msys2 {0}
      run: |
        export CC=gcc
        export CXX=g++
        make jsrt

    - name: Build (Debug)
      shell: msys2 {0}
      run: |
        export CC=gcc
        export CXX=g++
        make jsrt_g

    - name: Run basic functionality test
      shell: msys2 {0}
      run: |
        echo 'console.log("Hello from Windows CI!");' > test_ci.js
        ./target/release/jsrt.exe test_ci.js
        ./target/debug/jsrt.exe test_ci.js

    - name: Run unit tests
      shell: msys2 {0}
      run: make test

    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jsrt-windows
        path: |
          target/release/jsrt.exe
          target/debug/jsrt.exe
