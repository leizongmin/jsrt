name: Coverage

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake clang-format lcov
    
    - name: Build with coverage
      env:
        CC: gcc
        CXX: g++
      run: make coverage
    
    - name: Generate coverage comment
      id: coverage
      run: |
        comment_body=$(./scripts/generate_coverage_comment.sh)
        # Use heredoc to properly handle multiline content
        {
          echo 'comment_body<<EOF'
          echo "$comment_body"
          echo 'EOF'
        } >> $GITHUB_OUTPUT
    
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const body = process.env.COMMENT_BODY;
          
          // Find existing coverage comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('ðŸ“Š Test Coverage Report')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
      env:
        COMMENT_BODY: ${{ steps.coverage.outputs.comment_body }}
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          target/coverage/coverage_filtered.info
          target/coverage/html/