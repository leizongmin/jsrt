# Dockerfile for jsrt development with Claude Code
FROM ubuntu:22.04

# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Set up Chinese mirror for faster package downloads (using HTTP first to avoid certificate issues)
RUN sed -i 's|http://archive.ubuntu.com/ubuntu/|http://mirrors.aliyun.com/ubuntu/|g' /etc/apt/sources.list \
    && sed -i 's|http://security.ubuntu.com/ubuntu/|http://mirrors.aliyun.com/ubuntu/|g' /etc/apt/sources.list

# Install available GCC version from Ubuntu repository (faster, no PPA needed)
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc-12 \
    g++-12 \
    cmake \
    git \
    wget \
    curl \
    vim \
    nano \
    libssl-dev \
    libffi-dev \
    ca-certificates \
    gnupg \
    lsb-release \
    python3 \
    python3-pip \
    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 \
    && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 100 \
    && rm -rf /var/lib/apt/lists/*

# Install clang-format-20 from LLVM APT repository (using Tsinghua mirror)
RUN wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
    && echo "deb https://mirrors.tuna.tsinghua.edu.cn/llvm-apt/jammy/ llvm-toolchain-jammy-20 main" > /etc/apt/sources.list.d/llvm.list \
    && apt-get update \
    && apt-get install -y clang-format-20 \
    && ln -sf /usr/bin/clang-format-20 /usr/bin/clang-format \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installed clang-format version:" \
    && clang-format --version

# Install Node.js 22 from NodeSource (stable and reliable)
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - \
    && apt-get install -y nodejs \
    && npm config set registry https://registry.npmmirror.com \
    && rm -rf /var/lib/apt/lists/*

# Install Claude Code
RUN npm i -g @anthropic-ai/claude-code

# Set up working directory
WORKDIR /repo

# Create entrypoint script for claude-code with unsafe operations allowed
RUN echo '#!/bin/bash' > /usr/local/bin/claude-entrypoint \
    && echo 'cd /repo' >> /usr/local/bin/claude-entrypoint \
    && echo '# Fix git ownership issue in Docker for repo and submodules' >> /usr/local/bin/claude-entrypoint \
    && echo 'git config --global --add safe.directory "*" 2>/dev/null || true' >> /usr/local/bin/claude-entrypoint \
    && echo '# Configure git user from environment variables' >> /usr/local/bin/claude-entrypoint \
    && echo 'if [ -n "$GIT_USER_NAME" ]; then' >> /usr/local/bin/claude-entrypoint \
    && echo '  git config --global user.name "$GIT_USER_NAME"' >> /usr/local/bin/claude-entrypoint \
    && echo '  git config user.name "$GIT_USER_NAME"' >> /usr/local/bin/claude-entrypoint \
    && echo 'fi' >> /usr/local/bin/claude-entrypoint \
    && echo 'if [ -n "$GIT_USER_EMAIL" ]; then' >> /usr/local/bin/claude-entrypoint \
    && echo '  git config --global user.email "$GIT_USER_EMAIL"' >> /usr/local/bin/claude-entrypoint \
    && echo '  git config user.email "$GIT_USER_EMAIL"' >> /usr/local/bin/claude-entrypoint \
    && echo 'fi' >> /usr/local/bin/claude-entrypoint \
    && echo 'export BASH_DEFAULT_TIMEOUT_MS=600000' >> /usr/local/bin/claude-entrypoint \
    && echo 'export BASH_MAX_TIMEOUT_MS=600000' >> /usr/local/bin/claude-entrypoint \
    && echo 'exec claude "$@"' >> /usr/local/bin/claude-entrypoint \
    && chmod +x /usr/local/bin/claude-entrypoint

# Set the entrypoint
ENTRYPOINT ["/usr/local/bin/claude-entrypoint", "--dangerously-skip-permissions"]
CMD []
