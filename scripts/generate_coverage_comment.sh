#!/bin/bash

# Script to generate coverage comment for PR
# Usage: ./generate_coverage_comment.sh

set -e

# Check if coverage data exists
if [ ! -f "target/coverage/coverage_filtered.info" ]; then
    echo "Error: Coverage data not found. Run 'make coverage' first."
    exit 1
fi

# Get overall coverage
overall_line_coverage=$(lcov --summary target/coverage/coverage_filtered.info 2>/dev/null | grep "lines" | grep -o '[0-9.]*%' | head -1)
overall_function_coverage=$(lcov --summary target/coverage/coverage_filtered.info 2>/dev/null | grep "functions" | grep -o '[0-9.]*%' | head -1)

# Generate markdown comment
echo "## ðŸ“Š Test Coverage Report"
echo ""
echo "### Overall Coverage"
echo "- **Lines**: $overall_line_coverage"
echo "- **Functions**: $overall_function_coverage"
echo ""
echo "### File Coverage (src/ directory)"
echo ""
echo "| File | Line Coverage | Function Coverage |"
echo "|------|---------------|-------------------|"

# Extract per-file coverage for src/ directory
lcov --list target/coverage/coverage_filtered.info 2>/dev/null | grep -A 100 "src/]" | tail -n +2 | grep -E "^[^=|].*\|" | while IFS='|' read -r filename line_info func_info branch_info; do
    # Clean up the filename and percentages
    filename=$(echo "$filename" | sed 's/^ *//g' | sed 's/ *$//g')
    line_percent=$(echo "$line_info" | grep -o '[0-9.]*%' | head -1)
    func_percent=$(echo "$func_info" | grep -o '[0-9.]*%' | head -1)
    
    # Skip empty lines or header lines
    if [ -n "$filename" ] && [ "$filename" != "Total:" ] && [[ "$filename" != *"="* ]]; then
        # Default to 0% if no percentage found
        [ -z "$line_percent" ] && line_percent="0.0%"
        [ -z "$func_percent" ] && func_percent="0.0%"
        
        echo "| **src/$filename** | $line_percent | $func_percent |"
    fi
done

echo ""
echo "---"
echo "*Coverage report generated by [jsrt](https://github.com/leizongmin/jsrt) CI*"